{"ast":null,"code":"var _jsxFileName = \"S:\\\\Cognizant-Training\\\\FSE1\\\\Project-demo\\\\Tweet-App-Comp3\\\\Tweet-App-Comp3\\\\frontend\\\\tweet-app\\\\src\\\\features\\\\users\\\\profile\\\\PostMyTweet.tsx\",\n    _s = $RefreshSig$();\n\nimport { Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport { useEffect, useState } from \"react\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport * as Yup from \"yup\";\nimport { history } from \"../../..\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PostMyTweet = () => {\n  _s();\n\n  const {\n    userStore,\n    tweetStore\n  } = useStore();\n  const {\n    loading,\n    selectTweet\n  } = tweetStore;\n  const [tweet, setTweet] = useState({\n    id: 0,\n    tag: \"\",\n    subject: \"\"\n  });\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    if (id) {\n      selectTweet(+id).then(t => {\n        var updated = {\n          id: (t === null || t === void 0 ? void 0 : t.id) || 0,\n          tag: t === null || t === void 0 ? void 0 : t.tag,\n          subject: (t === null || t === void 0 ? void 0 : t.subject) || \"\"\n        };\n        setTweet(updated);\n      });\n    }\n  }, [id, selectTweet]);\n  const validationSchema = Yup.object({\n    tag: Yup.string().optional(),\n    subject: Yup.string().required(\"This is a required field\")\n  });\n\n  const handleFormSubmit = tweet => {\n    if (tweet.id) {\n      var _userStore$user;\n\n      tweetStore.updateTweet((_userStore$user = userStore.user) === null || _userStore$user === void 0 ? void 0 : _userStore$user.email, tweet.id, tweet).then(() => {\n        var _userStore$user2;\n\n        return history.push(\"/profiles/\" + ((_userStore$user2 = userStore.user) === null || _userStore$user2 === void 0 ? void 0 : _userStore$user2.email));\n      });\n    } else {\n      var _userStore$user3;\n\n      tweetStore.createTweet((_userStore$user3 = userStore.user) === null || _userStore$user3 === void 0 ? void 0 : _userStore$user3.email, tweet).then(() => {\n        var _userStore$user4;\n\n        return history.push(\"/profiles/\" + ((_userStore$user4 = userStore.user) === null || _userStore$user4 === void 0 ? void 0 : _userStore$user4.email));\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Segment, {\n    clearing: true,\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      enableReinitialize: true,\n      validationSchema: validationSchema,\n      initialValues: tweet,\n      onSubmit: values => handleFormSubmit(values),\n      children: _ref => {\n        let {\n          isValid,\n          isSubmitting,\n          handleSubmit\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          className: \"ui form\",\n          onSubmit: handleSubmit,\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            as: \"h2\",\n            content: \"Post tweet\",\n            color: \"teal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            name: \"tag\",\n            placeholder: \"Enter tag....\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(MyTextArea, {\n            rows: 3,\n            name: \"subject\",\n            placeholder: \"Enter subject...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            content: \"submit\",\n            disabled: !isValid || isSubmitting,\n            floated: \"right\",\n            color: \"green\",\n            loading: loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 6\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 3\n  }, this);\n};\n\n_s(PostMyTweet, \"gjouS6w6vyikjtpEWUrdLcV7v18=\", false, function () {\n  return [useStore, useParams];\n});\n\n_c = PostMyTweet;\nexport default _c2 = observer(PostMyTweet);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"PostMyTweet\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["Form","Formik","observer","useEffect","useState","Button","Header","Segment","useStore","MyTextInput","MyTextArea","Yup","history","useParams","PostMyTweet","userStore","tweetStore","loading","selectTweet","tweet","setTweet","id","tag","subject","then","t","updated","validationSchema","object","string","optional","required","handleFormSubmit","updateTweet","user","email","push","createTweet","values","isValid","isSubmitting","handleSubmit"],"sources":["S:/Cognizant-Training/FSE1/Project-demo/Tweet-App-Comp3/Tweet-App-Comp3/frontend/tweet-app/src/features/users/profile/PostMyTweet.tsx"],"sourcesContent":["import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { CreateTweet } from \"../../../app/models/Tweet\";\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport * as Yup from \"yup\";\r\nimport { history } from \"../../..\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst PostMyTweet = () => {\r\n\tconst { userStore, tweetStore } = useStore();\r\n\tconst { loading, selectTweet } = tweetStore;\r\n\tconst [tweet, setTweet] = useState<CreateTweet>({\r\n\t\tid: 0,\r\n\t\ttag: \"\",\r\n\t\tsubject: \"\",\r\n\t});\r\n\tconst { id } = useParams<{ id: string }>();\r\n\tuseEffect(() => {\r\n\t\tif (id) {\r\n\t\t\tselectTweet(+id).then((t) => {\r\n\t\t\t\tvar updated: CreateTweet = {\r\n\t\t\t\t\tid: t?.id || 0,\r\n\t\t\t\t\ttag: t?.tag,\r\n\t\t\t\t\tsubject: t?.subject || \"\",\r\n\t\t\t\t};\r\n\t\t\t\tsetTweet(updated);\r\n\t\t\t});\r\n\t\t}\r\n\t}, [id, selectTweet]);\r\n\r\n\tconst validationSchema = Yup.object({\r\n\t\ttag: Yup.string().optional(),\r\n\t\tsubject: Yup.string().required(\"This is a required field\"),\r\n\t});\r\n\r\n\tconst handleFormSubmit = (tweet: CreateTweet) => {\r\n\t\tif (tweet.id) {\r\n\t\t\ttweetStore\r\n\t\t\t\t.updateTweet(userStore.user?.email!, tweet.id, tweet)\r\n\t\t\t\t.then(() => history.push(\"/profiles/\" + userStore.user?.email!));\r\n\t\t} else {\r\n\t\t\ttweetStore\r\n\t\t\t\t.createTweet(userStore.user?.email!, tweet)\r\n\t\t\t\t.then(() => history.push(\"/profiles/\" + userStore.user?.email!));\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Segment clearing>\r\n\t\t\t<Formik\r\n\t\t\t\tenableReinitialize\r\n\t\t\t\tvalidationSchema={validationSchema}\r\n\t\t\t\tinitialValues={tweet}\r\n\t\t\t\tonSubmit={(values) => handleFormSubmit(values)}\r\n\t\t\t>\r\n\t\t\t\t{({ isValid, isSubmitting, handleSubmit }) => (\r\n\t\t\t\t\t<Form className=\"ui form\" onSubmit={handleSubmit} autoComplete=\"off\">\r\n\t\t\t\t\t\t<Header as=\"h2\" content=\"Post tweet\" color=\"teal\" />\r\n\t\t\t\t\t\t<MyTextInput name=\"tag\" placeholder=\"Enter tag....\" />\r\n\t\t\t\t\t\t<MyTextArea\r\n\t\t\t\t\t\t\trows={3}\r\n\t\t\t\t\t\t\tname=\"subject\"\r\n\t\t\t\t\t\t\tplaceholder=\"Enter subject...\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t\t\tcontent=\"submit\"\r\n\t\t\t\t\t\t\tdisabled={!isValid || isSubmitting}\r\n\t\t\t\t\t\t\tfloated=\"right\"\r\n\t\t\t\t\t\t\tcolor=\"green\"\r\n\t\t\t\t\t\t\tloading={loading}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Form>\r\n\t\t\t\t)}\r\n\t\t\t</Formik>\r\n\t\t</Segment>\r\n\t);\r\n};\r\n\r\nexport default observer(PostMyTweet);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}