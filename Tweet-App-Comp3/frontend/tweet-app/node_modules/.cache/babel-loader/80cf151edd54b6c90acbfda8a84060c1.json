{"ast":null,"code":"import axios from \"axios\";\nimport { store } from \"../stores/store\";\n\nconst sleep = delay => {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n};\n\naxios.defaults.baseURL = \"https://tweetappwebappmap.azurewebsites.net/api/v1/tweets\";\naxios.interceptors.request.use(config => {\n  const token = store.commonStore.token;\n  if (token) config.headers.Authorization = `Bearer ${token}`;\n  return config;\n});\naxios.interceptors.response.use(async response => {\n  try {\n    await sleep(1000);\n    return response;\n  } catch (error) {\n    console.log(error);\n    return await Promise.reject(error);\n  }\n});\n\nconst responseBody = response => response.data;\n\nconst requests = {\n  get: url => axios.get(url).then(responseBody),\n  post: (url, body) => axios.post(url, body).then(responseBody),\n  put: (url, body) => axios.put(url, body).then(responseBody),\n  del: url => axios.delete(url).then(responseBody)\n};\nconst UserRequest = {\n  list: () => requests.get(\"/users/all\"),\n  login: creds => requests.post(\"/login\", creds),\n  register: creds => requests.post(\"/register\", creds),\n  search: username => requests.get(`/search/${username}`),\n  current: () => requests.get(\"/currentuser\"),\n  uploadPhoto: (username, file) => {\n    let formData = new FormData();\n    formData.append(\"File\", file);\n    return axios.post(`user/${username}/photos`, formData, {\n      headers: {\n        \"Content-type\": \"multipart/form-data\"\n      }\n    });\n  },\n  setMainPhoto: (username, id) => requests.post(`user/${username}/photo/${id}/set-Main`),\n  deletePhoto: (username, id) => requests.del(`user/${username}/photo/${id}/delete`),\n  forgotPassword: (username, forgot) => requests.post(`${username}/forgot`, forgot)\n};\nconst TweetRequest = {\n  list: () => requests.get(\"/all\"),\n  listTweetOfUser: username => requests.get(`/${username}`),\n  createTweet: (tweetObj, username) => requests.post(`/${username}/add`, tweetObj),\n  details: id => requests.get(`/details/${id}`),\n  delete: (username, id) => requests.del(`/${username}/delete/${id}`),\n  update: (username, id, body) => requests.put(`/${username}/update/${id}`, body),\n  likeDetails: () => requests.get(`/reactions`),\n  postLike: (id, username) => requests.post(`/${username}/like/${id}`),\n  commentDetails: () => requests.get(\"/replies\"),\n  postComment: (id, username, message) => requests.post(`${username}/reply/${id}`, message)\n};\nconst agent = {\n  UserRequest,\n  TweetRequest\n};\nexport default agent;","map":{"version":3,"names":["axios","store","sleep","delay","Promise","resolve","setTimeout","defaults","baseURL","interceptors","request","use","config","token","commonStore","headers","Authorization","response","error","console","log","reject","responseBody","data","requests","get","url","then","post","body","put","del","delete","UserRequest","list","login","creds","register","search","username","current","uploadPhoto","file","formData","FormData","append","setMainPhoto","id","deletePhoto","forgotPassword","forgot","TweetRequest","listTweetOfUser","createTweet","tweetObj","details","update","likeDetails","postLike","commentDetails","postComment","message","agent"],"sources":["S:/Cognizant-Training/FSE1/Project-demo/Tweet-App-Comp3/Tweet-App-Comp3/frontend/tweet-app/src/app/api/agent.ts"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport { Reactions } from \"../models/Reactions\";\r\nimport { ReplyResponse } from \"../models/ReplyResponse\";\r\nimport { Response } from \"../models/Response\";\r\nimport { CreateTweet, Tweet } from \"../models/Tweet\";\r\nimport { Forgot, LoginUser, RegisterUser, User } from \"../models/User\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n\treturn new Promise((resolve) => {\r\n\t\tsetTimeout(resolve, delay);\r\n\t});\r\n};\r\n\r\naxios.defaults.baseURL = \"https://tweetappwebappmap.azurewebsites.net/api/v1/tweets\";\r\n\r\naxios.interceptors.request.use((config) => {\r\n\tconst token = store.commonStore.token;\r\n\tif (token) config.headers!.Authorization = `Bearer ${token}`;\r\n\treturn config;\r\n});\r\n\r\naxios.interceptors.response.use(async (response) => {\r\n\ttry {\r\n\t\tawait sleep(1000);\r\n\t\treturn response;\r\n\t} catch (error) {\r\n\t\tconsole.log(error);\r\n\t\treturn await Promise.reject(error);\r\n\t}\r\n});\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n\tget: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n\tpost: <T>(url: string, body?: {}) =>\r\n\t\taxios.post<T>(url, body).then(responseBody),\r\n\tput: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n\tdel: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n};\r\n\r\nconst UserRequest = {\r\n\tlist: () => requests.get<Response<User[]>>(\"/users/all\"),\r\n\tlogin: (creds: LoginUser) => requests.post<Response<User>>(\"/login\", creds),\r\n\tregister: (creds: RegisterUser) =>\r\n\t\trequests.post<Response<User>>(\"/register\", creds),\r\n\tsearch: (username: string) =>\r\n\t\trequests.get<Response<User[]>>(`/search/${username}`),\r\n\tcurrent: () => requests.get<Response<User>>(\"/currentuser\"),\r\n\tuploadPhoto: (username: string, file: Blob) => {\r\n\t\tlet formData = new FormData();\r\n\t\tformData.append(\"File\", file);\r\n\t\treturn axios.post<Response<User>>(`user/${username}/photos`, formData, {\r\n\t\t\theaders: { \"Content-type\": \"multipart/form-data\" },\r\n\t\t});\r\n\t},\r\n\tsetMainPhoto: (username: string, id: number) =>\r\n\t\trequests.post(`user/${username}/photo/${id}/set-Main`),\r\n\tdeletePhoto: (username: string, id: number) =>\r\n\t\trequests.del(`user/${username}/photo/${id}/delete`),\r\n\tforgotPassword: (username: string, forgot: Forgot) =>\r\n\t\trequests.post(`${username}/forgot`, forgot),\r\n};\r\n\r\nconst TweetRequest = {\r\n\tlist: () => requests.get<Response<Tweet[]>>(\"/all\"),\r\n\tlistTweetOfUser: (username: string) =>\r\n\t\trequests.get<Response<Tweet[]>>(`/${username}`),\r\n\tcreateTweet: (tweetObj: CreateTweet, username: string) =>\r\n\t\trequests.post<Response<Tweet>>(`/${username}/add`, tweetObj),\r\n\tdetails: (id: number) => requests.get<Response<Tweet>>(`/details/${id}`),\r\n\tdelete: (username: string, id: number) =>\r\n\t\trequests.del<Response<boolean>>(`/${username}/delete/${id}`),\r\n\tupdate: (username: string, id: number, body: {}) =>\r\n\t\trequests.put<Response<Tweet>>(`/${username}/update/${id}`, body),\r\n\tlikeDetails: () => requests.get<Response<Reactions[]>>(`/reactions`),\r\n\tpostLike: (id: number, username: string) =>\r\n\t\trequests.post<Response<number>>(`/${username}/like/${id}`),\r\n\tcommentDetails: () => requests.get<Response<ReplyResponse[]>>(\"/replies\"),\r\n\tpostComment: (id: number, username: string, message: any) =>\r\n\t\trequests.post<Response<ReplyResponse>>(`${username}/reply/${id}`, message),\r\n};\r\n\r\nconst agent = {\r\n\tUserRequest,\r\n\tTweetRequest,\r\n};\r\n\r\nexport default agent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}